// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/auth/google/callback": {
            "get": {
                "description": "Handles the callback from Google OAuth, exchanges code for user info and creates/updates user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Google OAuth Callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization code from Google",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State parameter for CSRF protection",
                        "name": "state",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful with user data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - Missing state cookie, invalid state, or missing authorization code"
                    },
                    "500": {
                        "description": "Internal server error - Token exchange or user processing failed"
                    }
                }
            }
        },
        "/api/auth/google/login": {
            "get": {
                "description": "Redirects user to Google's OAuth consent page to begin authentication process",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Initiate Google OAuth Login",
                "parameters": [
                    {
                        "type": "string",
                        "description": "OAuth mode: login or link",
                        "name": "mode",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Original redirect page (for login mode)",
                        "name": "from",
                        "in": "query"
                    }
                ],
                "responses": {
                    "307": {
                        "description": "Redirect to Google OAuth consent page"
                    },
                    "400": {
                        "description": "Bad request - Authentication required for link mode"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Authenticate user with email and password, returns JWT token on success",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/model.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid request body or missing fields",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/logout": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Clear user session by removing JWT cookie",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Logout",
                "responses": {
                    "200": {
                        "description": "Logout successful",
                        "schema": {
                            "$ref": "#/definitions/model.AuthResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Register a new user account with email, username, display name, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Registration",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/model.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid request body, missing fields, or validation errors",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/calendars": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all imported calendars (Google and ICS) for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Get Imported Calendars",
                "responses": {
                    "200": {
                        "description": "Imported calendars retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model.ImportedCalendarsResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/calendars/events": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all events for user's calendars within a specified time range (max 3 months)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Get Calendar Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start timestamp in Unix format",
                        "name": "start_timestamp",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End timestamp in Unix format",
                        "name": "end_timestamp",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "boolean",
                        "description": "Force sync from Google API regardless of cache",
                        "name": "force_sync",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Events retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model.CalendarEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid query parameters or time range",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/calendars/google": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves all Google calendars for the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Get User Calendars",
                "responses": {
                    "200": {
                        "description": "Calendars retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model.CalendarListResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Google token not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Imports a specific Google calendar to the user's database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Import Google Calendar",
                "parameters": [
                    {
                        "description": "Import calendar request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/calendar.ImportCalendarRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Calendar imported successfully",
                        "schema": {
                            "$ref": "#/definitions/calendar.ImportCalendarResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Google token not found or calendar not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict - Calendar already imported",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/calendars/ics": {
            "post": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Imports an ICS file via JSON body or file upload. Calendar name is extracted from ICS properties (X-WR-CALNAME) or falls back to \"Untitled Calendar\"",
                "consumes": [
                    "application/json",
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Import ICS File",
                "parameters": [
                    {
                        "description": "Import ICS request (JSON) - calendar_name is optional",
                        "name": "request",
                        "in": "body",
                        "schema": {
                            "$ref": "#/definitions/calendar.ImportICSRequest"
                        }
                    },
                    {
                        "type": "string",
                        "description": "Calendar name override (optional - will use ICS properties if not provided)",
                        "name": "calendar_name",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "ICS file to upload (required for file upload)",
                        "name": "ics_file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "201": {
                        "description": "ICS file imported successfully",
                        "schema": {
                            "$ref": "#/definitions/calendar.ImportICSResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid request body or ICS data",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/calendars/{id}": {
            "delete": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Deletes an existing calendar and all its associated events",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Delete Calendar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Calendar ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Calendar deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/model.CalendarDeleteResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid calendar ID",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Calendar not found or access denied",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            },
            "patch": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Updates an existing calendar's properties such as summary, description, visibility, etc.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Calendar"
                ],
                "summary": "Update Calendar",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Calendar ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Calendar update request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CalendarUpdateRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Calendar updated successfully",
                        "schema": {
                            "$ref": "#/definitions/model.CalendarUpdateResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid request body or calendar ID",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - Calendar not found or access denied",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/me": {
            "get": {
                "security": [
                    {
                        "BearerAuth": []
                    }
                ],
                "description": "Retrieves the authenticated user's profile information from JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Profile",
                "responses": {
                    "200": {
                        "description": "User profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model.UserProfileResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Authentication required",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/{username}": {
            "get": {
                "description": "Retrieves public profile information for a specific user by username. No authentication required.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Public User Profile",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Public user profile retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model.PublicUserProfileResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/users/{username}/events": {
            "get": {
                "description": "Retrieves public calendar events for a specific user within a specified time range (max 3 months). No authentication required.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get Public User Events",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Username",
                        "name": "username",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start timestamp in Unix format",
                        "name": "start_timestamp",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End timestamp in Unix format",
                        "name": "end_timestamp",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Public events retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/model.CalendarEventsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request - Invalid parameters or time range",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found - User not found",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "calendar.ImportCalendarRequest": {
            "type": "object",
            "required": [
                "calendar_id"
            ],
            "properties": {
                "calendar_id": {
                    "type": "string"
                }
            }
        },
        "calendar.ImportCalendarResponse": {
            "type": "object",
            "properties": {
                "calendar": {
                    "$ref": "#/definitions/model.Calendar"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "calendar.ImportICSRequest": {
            "type": "object",
            "required": [
                "ics_data"
            ],
            "properties": {
                "calendar_name": {
                    "type": "string"
                },
                "ics_data": {
                    "type": "string"
                }
            }
        },
        "calendar.ImportICSResponse": {
            "type": "object",
            "properties": {
                "calendar": {
                    "$ref": "#/definitions/model.Calendar"
                },
                "events_count": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "type": "boolean"
                }
            }
        },
        "model.Account": {
            "description": "OAuth account information",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "email": {
                    "description": "e.g. example@gmail.com",
                    "type": "string"
                },
                "expiry": {
                    "description": "Access token expiry",
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "0"
                },
                "provider": {
                    "description": "e.g. \"google\", \"github\"",
                    "type": "string"
                },
                "provider_id": {
                    "description": "e.g. Google sub, GitHub ID",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string",
                    "example": "0"
                }
            }
        },
        "model.AuthResponse": {
            "description": "Successful authentication response",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Response message",
                    "type": "string",
                    "example": "Login successful"
                },
                "success": {
                    "description": "Indicates if the operation was successful",
                    "type": "boolean",
                    "example": true
                },
                "token": {
                    "description": "JWT authentication token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "description": "User information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                }
            }
        },
        "model.Calendar": {
            "description": "Calendar",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "event_color": {
                    "type": "string"
                },
                "event_redaction": {
                    "type": "string"
                },
                "id": {
                    "type": "string",
                    "example": "0"
                },
                "last_full_sync": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/definitions/model.CalendarSource"
                },
                "source_id": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "sync_status": {
                    "$ref": "#/definitions/model.CalendarSyncStatus"
                },
                "sync_token": {
                    "type": "string"
                },
                "synced_at": {
                    "type": "string"
                },
                "time_zone": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string",
                    "example": "0"
                },
                "visibility": {
                    "$ref": "#/definitions/model.CalendarVisibility"
                }
            }
        },
        "model.CalendarDeleteResponse": {
            "description": "Calendar delete response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Calendar deleted successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.CalendarEvent": {
            "description": "Calendar event",
            "type": "object",
            "properties": {
                "all_day": {
                    "description": "True if it's an all-day event",
                    "type": "boolean"
                },
                "calendar_id": {
                    "description": "calendar ID",
                    "type": "string",
                    "example": "0"
                },
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "description": "Optional description",
                    "type": "string"
                },
                "end": {
                    "description": "ISO8601 datetime or date",
                    "type": "string"
                },
                "event_color": {
                    "description": "Optional display color",
                    "type": "string"
                },
                "id": {
                    "description": "Unique snowflake ID",
                    "type": "string",
                    "example": "0"
                },
                "location": {
                    "description": "Optional event location",
                    "type": "string"
                },
                "source_id": {
                    "description": "Source calendar ID",
                    "type": "string"
                },
                "start": {
                    "description": "ISO8601 datetime or date (for all-day)",
                    "type": "string"
                },
                "title": {
                    "description": "Event title (summary)",
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "visibility": {
                    "description": "public / private / default",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.CalendarEventVisibility"
                        }
                    ]
                }
            }
        },
        "model.CalendarEventVisibility": {
            "type": "string",
            "enum": [
                "public",
                "private",
                "inherited"
            ],
            "x-enum-varnames": [
                "CalendarEventVisibilityPublic",
                "CalendarEventVisibilityPrivate",
                "CalendarEventVisibilityInherited"
            ]
        },
        "model.CalendarEventsResponse": {
            "description": "Calendar events response",
            "type": "object",
            "properties": {
                "calendars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CalendarWithEvents"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Calendar events retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.CalendarListResponse": {
            "description": "Calendar list response",
            "type": "object",
            "properties": {
                "calendars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.GoogleCalendar"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Calendars retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.CalendarSource": {
            "type": "string",
            "enum": [
                "google",
                "ics"
            ],
            "x-enum-varnames": [
                "SourceGoogle",
                "SourceICS"
            ]
        },
        "model.CalendarSyncStatus": {
            "type": "string",
            "enum": [
                "never_synced",
                "full_sync_complete",
                "incremental_sync"
            ],
            "x-enum-varnames": [
                "CalendarSyncStatusNeverSynced",
                "CalendarSyncStatusFullSyncComplete",
                "CalendarSyncStatusIncrementalSync"
            ]
        },
        "model.CalendarUpdateRequest": {
            "description": "Calendar update request",
            "type": "object",
            "properties": {
                "description": {
                    "type": "string",
                    "example": "Updated calendar description"
                },
                "event_color": {
                    "type": "string",
                    "example": "#ff5722"
                },
                "event_redaction": {
                    "type": "string",
                    "example": "Work"
                },
                "summary": {
                    "type": "string",
                    "example": "My Updated Calendar"
                },
                "time_zone": {
                    "type": "string",
                    "example": "America/New_York"
                },
                "visibility": {
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.CalendarVisibility"
                        }
                    ],
                    "example": "private"
                }
            }
        },
        "model.CalendarUpdateResponse": {
            "description": "Calendar update response",
            "type": "object",
            "properties": {
                "calendar": {
                    "$ref": "#/definitions/model.Calendar"
                },
                "message": {
                    "type": "string",
                    "example": "Calendar updated successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.CalendarVisibility": {
            "type": "string",
            "enum": [
                "public",
                "private"
            ],
            "x-enum-varnames": [
                "CalendarVisibilityPublic",
                "CalendarVisibilityPrivate"
            ]
        },
        "model.CalendarWithEvents": {
            "description": "Calendar with events",
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "event_color": {
                    "type": "string"
                },
                "event_redaction": {
                    "type": "string"
                },
                "events": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.CalendarEvent"
                    }
                },
                "id": {
                    "type": "string",
                    "example": "0"
                },
                "last_full_sync": {
                    "type": "string"
                },
                "source": {
                    "$ref": "#/definitions/model.CalendarSource"
                },
                "source_id": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                },
                "sync_status": {
                    "$ref": "#/definitions/model.CalendarSyncStatus"
                },
                "sync_token": {
                    "type": "string"
                },
                "synced_at": {
                    "type": "string"
                },
                "time_zone": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string",
                    "example": "0"
                },
                "visibility": {
                    "$ref": "#/definitions/model.CalendarVisibility"
                }
            }
        },
        "model.ErrorResponse": {
            "description": "Error response structure",
            "type": "object",
            "properties": {
                "error": {
                    "description": "Detailed error information",
                    "type": "string",
                    "example": "invalid email or password"
                },
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Authentication failed"
                },
                "success": {
                    "description": "Always false for error responses",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "model.GoogleCalendar": {
            "description": "Google Calendar information",
            "type": "object",
            "properties": {
                "accessRole": {
                    "type": "string",
                    "example": "owner"
                },
                "backgroundColor": {
                    "type": "string",
                    "example": "#9c27b0"
                },
                "colorId": {
                    "type": "string",
                    "example": "1"
                },
                "conferenceProperties": {
                    "$ref": "#/definitions/model.GoogleCalendarConferenceProperties"
                },
                "deleted": {
                    "type": "boolean",
                    "example": false
                },
                "description": {
                    "type": "string",
                    "example": "Personal calendar"
                },
                "etag": {
                    "type": "string",
                    "example": "\"00000000000000000000\""
                },
                "foregroundColor": {
                    "type": "string",
                    "example": "#ffffff"
                },
                "hidden": {
                    "type": "boolean",
                    "example": false
                },
                "id": {
                    "type": "string",
                    "example": "primary"
                },
                "kind": {
                    "type": "string",
                    "example": "calendar#calendarListEntry"
                },
                "location": {
                    "type": "string",
                    "example": "Mountain View, CA"
                },
                "primary": {
                    "type": "boolean",
                    "example": true
                },
                "selected": {
                    "type": "boolean",
                    "example": true
                },
                "summary": {
                    "type": "string",
                    "example": "My Calendar"
                },
                "summaryOverride": {
                    "type": "string",
                    "example": "Custom Summary"
                },
                "timeZone": {
                    "type": "string",
                    "example": "America/Los_Angeles"
                }
            }
        },
        "model.GoogleCalendarConferenceProperties": {
            "description": "Google Calendar conference properties",
            "type": "object",
            "properties": {
                "allowedConferenceSolutionTypes": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "[\"hangoutsMeet\"]"
                    ]
                }
            }
        },
        "model.ImportedCalendarsResponse": {
            "description": "Imported calendars response",
            "type": "object",
            "properties": {
                "calendars": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Calendar"
                    }
                },
                "message": {
                    "type": "string",
                    "example": "Imported calendars retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                }
            }
        },
        "model.LoginRequest": {
            "description": "Login request payload",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User's password (minimum 6 characters)",
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                }
            }
        },
        "model.PublicUserProfile": {
            "description": "Public user profile information",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Account creation timestamp",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "display_name": {
                    "description": "User's display name",
                    "type": "string",
                    "example": "John Doe"
                },
                "id": {
                    "description": "Unique user identifier",
                    "type": "string",
                    "example": "123456789"
                },
                "picture": {
                    "description": "Profile picture URL",
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "username": {
                    "description": "Username",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "model.PublicUserProfileResponse": {
            "description": "Public user profile response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "Public user profile retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "user": {
                    "$ref": "#/definitions/model.PublicUserProfile"
                }
            }
        },
        "model.RegisterRequest": {
            "description": "Registration request payload",
            "type": "object",
            "required": [
                "display_name",
                "email",
                "password",
                "username"
            ],
            "properties": {
                "display_name": {
                    "description": "User's display name (1-100 characters)",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "John Doe"
                },
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "Password (minimum 6 characters)",
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                },
                "username": {
                    "description": "Username (3-50 characters)",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "johndoe"
                }
            }
        },
        "model.User": {
            "description": "User account information",
            "type": "object",
            "properties": {
                "accounts": {
                    "description": "Associated OAuth accounts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Account"
                    }
                },
                "created_at": {
                    "description": "Account creation timestamp",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "display_name": {
                    "description": "User's display name",
                    "type": "string",
                    "example": "John Doe"
                },
                "id": {
                    "description": "Unique user identifier",
                    "type": "string",
                    "example": "123456789"
                },
                "password": {
                    "description": "Password hash (excluded from responses)",
                    "type": "string"
                },
                "picture": {
                    "description": "Profile picture URL",
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "updated_at": {
                    "description": "Last update timestamp",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "username": {
                    "description": "Username",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "model.UserProfileResponse": {
            "description": "User profile response",
            "type": "object",
            "properties": {
                "message": {
                    "type": "string",
                    "example": "User profile retrieved successfully"
                },
                "success": {
                    "type": "boolean",
                    "example": true
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
