{
    "swagger": "2.0",
    "info": {
        "contact": {}
    },
    "paths": {
        "/api/auth/google/callback": {
            "get": {
                "description": "Handles the callback from Google OAuth, exchanges code for user info and creates/updates user account",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Google OAuth Callback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Authorization code from Google",
                        "name": "code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "State parameter for CSRF protection",
                        "name": "state",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Authentication successful with user data",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - Missing state cookie, invalid state, or missing authorization code"
                    },
                    "500": {
                        "description": "Internal server error - Token exchange or user processing failed"
                    }
                }
            }
        },
        "/api/auth/google/login": {
            "get": {
                "description": "Redirects user to Google's OAuth consent page to begin authentication process",
                "produces": [
                    "text/html"
                ],
                "tags": [
                    "OAuth"
                ],
                "summary": "Initiate Google OAuth Login",
                "responses": {
                    "307": {
                        "description": "Redirect to Google OAuth consent page"
                    },
                    "500": {
                        "description": "Internal server error"
                    }
                }
            }
        },
        "/api/auth/login": {
            "post": {
                "description": "Authenticate user with email and password, returns JWT token on success",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Login",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/model.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid request body or missing fields",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - Invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/auth/register": {
            "post": {
                "description": "Register a new user account with email, username, display name, and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User Registration",
                "parameters": [
                    {
                        "description": "Registration details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Registration successful",
                        "schema": {
                            "$ref": "#/definitions/model.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid request body, missing fields, or validation errors",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/model.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "model.AuthResponse": {
            "description": "Successful authentication response",
            "type": "object",
            "properties": {
                "message": {
                    "description": "Response message",
                    "type": "string",
                    "example": "Login successful"
                },
                "success": {
                    "description": "Indicates if the operation was successful",
                    "type": "boolean",
                    "example": true
                },
                "token": {
                    "description": "JWT authentication token",
                    "type": "string",
                    "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                },
                "user": {
                    "description": "User information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                }
            }
        },
        "model.ErrorResponse": {
            "description": "Error response structure",
            "type": "object",
            "properties": {
                "error": {
                    "description": "Detailed error information",
                    "type": "string",
                    "example": "invalid email or password"
                },
                "message": {
                    "description": "Error message",
                    "type": "string",
                    "example": "Authentication failed"
                },
                "success": {
                    "description": "Always false for error responses",
                    "type": "boolean",
                    "example": false
                }
            }
        },
        "model.LoginRequest": {
            "description": "Login request payload",
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "User's password (minimum 6 characters)",
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                }
            }
        },
        "model.RegisterRequest": {
            "description": "Registration request payload",
            "type": "object",
            "required": [
                "display_name",
                "email",
                "password",
                "username"
            ],
            "properties": {
                "display_name": {
                    "description": "User's display name (1-100 characters)",
                    "type": "string",
                    "maxLength": 100,
                    "minLength": 1,
                    "example": "John Doe"
                },
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "password": {
                    "description": "Password (minimum 6 characters)",
                    "type": "string",
                    "minLength": 6,
                    "example": "password123"
                },
                "username": {
                    "description": "Username (3-50 characters)",
                    "type": "string",
                    "maxLength": 50,
                    "minLength": 3,
                    "example": "johndoe"
                }
            }
        },
        "model.User": {
            "description": "User account information",
            "type": "object",
            "properties": {
                "created_at": {
                    "description": "Account creation timestamp",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "display_name": {
                    "description": "User's display name",
                    "type": "string",
                    "example": "John Doe"
                },
                "email": {
                    "description": "User's email address",
                    "type": "string",
                    "example": "user@example.com"
                },
                "google_id": {
                    "description": "Google OAuth ID",
                    "type": "string",
                    "example": "123456789"
                },
                "id": {
                    "description": "Unique user identifier",
                    "type": "string",
                    "example": "123456789"
                },
                "password": {
                    "description": "Password hash (excluded from responses)",
                    "type": "string"
                },
                "picture": {
                    "description": "Profile picture URL",
                    "type": "string",
                    "example": "https://example.com/avatar.jpg"
                },
                "updated_at": {
                    "description": "Last update timestamp",
                    "type": "string",
                    "example": "2024-01-01T00:00:00Z"
                },
                "username": {
                    "description": "Username",
                    "type": "string",
                    "example": "johndoe"
                }
            }
        }
    }
}